{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red24\green24\blue24;\red193\green193\blue193;
\red140\green211\blue254;\red194\green126\blue101;\red70\green137\blue204;\red212\green214\blue154;\red89\green138\blue67;
\red66\green179\blue255;\red202\green202\blue202;\red67\green192\blue160;\red167\green197\blue152;\red109\green109\blue109;
}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c12157\c12157\c12157;\cssrgb\c80000\c80000\c80000;
\cssrgb\c61176\c86275\c99608;\cssrgb\c80784\c56863\c47059;\cssrgb\c33725\c61176\c83922;\cssrgb\c86275\c86275\c66667;\cssrgb\c41569\c60000\c33333;
\cssrgb\c30980\c75686\c100000;\cssrgb\c83137\c83137\c83137;\cssrgb\c30588\c78824\c69020;\cssrgb\c70980\c80784\c65882;\cssrgb\c50196\c50196\c50196;
}
\margl1440\margr1440\vieww14000\viewh18100\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  \{ \cf5 \strokec5 useState\cf4 \strokec4  \} \cf2 \strokec2 from\cf4 \strokec4  \cf6 \strokec6 'react'\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 function\cf4 \strokec4  \cf8 \strokec8 Feature\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf9 \strokec9 // Step 2: State for inputs and result\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 const\cf4 \strokec4  [\cf10 \strokec10 num1\cf4 \strokec4 , \cf8 \strokec8 setNum1\cf4 \strokec4 ] \cf11 \strokec11 =\cf4 \strokec4  \cf8 \strokec8 useState\cf4 \strokec4 <\cf12 \strokec12 number\cf4 \strokec4 >();\cb1 \
\cb3     \cf7 \strokec7 const\cf4 \strokec4  [\cf10 \strokec10 num2\cf4 \strokec4 , \cf8 \strokec8 setNum2\cf4 \strokec4 ] \cf11 \strokec11 =\cf4 \strokec4  \cf8 \strokec8 useState\cf4 \strokec4 <\cf12 \strokec12 number\cf4 \strokec4 >();\cb1 \
\cb3     \cf7 \strokec7 const\cf4 \strokec4  [\cf10 \strokec10 sum\cf4 \strokec4 , \cf8 \strokec8 setSum\cf4 \strokec4 ] \cf11 \strokec11 =\cf4 \strokec4  \cf8 \strokec8 useState\cf4 \strokec4 <\cf12 \strokec12 number\cf4 \strokec4 >(\cf13 \strokec13 0\cf4 \strokec4 );\cb1 \
\
\cb3     \cf9 \strokec9 // Step 3: Function to add numbers\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 function\cf4 \strokec4  \cf8 \strokec8 addNumbers\cf4 \strokec4 ()\{\cb1 \
\cb3         \cf7 \strokec7 const\cf4 \strokec4  \cf10 \strokec10 total\cf4 \strokec4  \cf11 \strokec11 =\cf4 \strokec4  \cf12 \strokec12 Number\cf4 \strokec4 (\cf10 \strokec10 num1\cf4 \strokec4 ) \cf11 \strokec11 +\cf4 \strokec4  \cf12 \strokec12 Number\cf4 \strokec4 (\cf10 \strokec10 num2\cf4 \strokec4 ); \cf9 \strokec9 // convert to numbers\cf4 \cb1 \strokec4 \
\cb3         \cf8 \strokec8 setSum\cf4 \strokec4 (\cf10 \strokec10 total\cf4 \strokec4 ); \cf9 \strokec9 // store the result\cf4 \cb1 \strokec4 \
\cb3     \};\cb1 \
\
\cb3     \cf2 \strokec2 return\cf4 \strokec4  (\cb1 \
\cb3         \cf14 \strokec14 <\cf7 \strokec7 div\cf14 \strokec14 >\cf4 \cb1 \strokec4 \
\cb3             \cf14 \strokec14 <\cf7 \strokec7 h1\cf14 \strokec14 >\cf4 \strokec4 Feature\cf14 \strokec14 </\cf7 \strokec7 h1\cf14 \strokec14 >\cf4 \cb1 \strokec4 \
\
\cb3             \cf7 \strokec7 \{\cf9 \strokec9 /* Step 4: Input fields */\cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3             \cf14 \strokec14 <\cf7 \strokec7 input\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 type\cf11 \strokec11 =\cf6 \strokec6 "number"\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 value\cf11 \strokec11 =\cf7 \strokec7 \{\cf10 \strokec10 num1\cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 onChange\cf11 \strokec11 =\cf7 \strokec7 \{\cf11 \strokec11 (\cf5 \strokec5 e\cf11 \strokec11 ) \cf7 \strokec7 =>\cf11 \strokec11  \cf8 \strokec8 setNum1\cf11 \strokec11 (\cf12 \strokec12 Number\cf11 \strokec11 (\cf5 \strokec5 e\cf11 \strokec11 .\cf5 \strokec5 target\cf11 \strokec11 .\cf5 \strokec5 value\cf11 \strokec11 ))\cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 placeholder\cf11 \strokec11 =\cf6 \strokec6 "Enter first number"\cf4 \cb1 \strokec4 \
\cb3             \cf14 \strokec14 />\cf4 \cb1 \strokec4 \
\cb3             \cf14 \strokec14 <\cf7 \strokec7 input\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 type\cf11 \strokec11 =\cf6 \strokec6 "number"\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 value\cf11 \strokec11 =\cf7 \strokec7 \{\cf10 \strokec10 num2\cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 onChange\cf11 \strokec11 =\cf7 \strokec7 \{\cf11 \strokec11 (\cf5 \strokec5 e\cf11 \strokec11 ) \cf7 \strokec7 =>\cf11 \strokec11  \cf8 \strokec8 setNum2\cf11 \strokec11 (\cf12 \strokec12 Number\cf11 \strokec11 (\cf5 \strokec5 e\cf11 \strokec11 .\cf5 \strokec5 target\cf11 \strokec11 .\cf5 \strokec5 value\cf11 \strokec11 ))\cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 placeholder\cf11 \strokec11 =\cf6 \strokec6 "Enter second number"\cf4 \cb1 \strokec4 \
\cb3             \cf14 \strokec14 />\cf4 \cb1 \strokec4 \
\
\cb3             \cf7 \strokec7 \{\cf9 \strokec9 /* Button to trigger addition */\cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3             \cf14 \strokec14 <\cf7 \strokec7 button\cf4 \strokec4  \cf5 \strokec5 onClick\cf11 \strokec11 =\cf7 \strokec7 \{\cf8 \strokec8 addNumbers\cf7 \strokec7 \}\cf14 \strokec14 >\cf4 \strokec4 Add\cf14 \strokec14 </\cf7 \strokec7 button\cf14 \strokec14 >\cf4 \cb1 \strokec4 \
\
\cb3             \cf7 \strokec7 \{\cf9 \strokec9 /* Display the result */\cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3             \cf7 \strokec7 \{\cf10 \strokec10 sum\cf11 \strokec11  !== \cf7 \strokec7 null\cf11 \strokec11  && \cf14 \strokec14 <\cf7 \strokec7 p\cf14 \strokec14 >\cf11 \strokec11 Sum: \cf7 \strokec7 \{\cf10 \strokec10 sum\cf7 \strokec7 \}\cf14 \strokec14 </\cf7 \strokec7 p\cf14 \strokec14 >\cf7 \strokec7 \}\cf4 \cb1 \strokec4 \
\cb3         \cf14 \strokec14 </\cf7 \strokec7 div\cf14 \strokec14 >\cf4 \cb1 \strokec4 \
\cb3     );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 export\cf4 \strokec4  \cf2 \strokec2 default\cf4 \strokec4  \cf8 \strokec8 Feature\cf4 \strokec4 ;\cb1 \
\
\
\
\
\
\
function Child (props)\{\
  return(\
  <h1> Hello, \{props.name\}</h1>\
  );\
\}\
\
\
function Parent()\{\
  return (\
      <div>\
        <Child name="James Bond" /> \
        <Child name="Cardi B" />\
        <Child name="Donald Trump" />\
        <Child name="Barney is happy" />\
      </div>\
  );\
\}\
\
\
// Get the root DOM node\
const domNode = document.getElementById('root');\
const root = ReactDOM.createRoot(domNode);\
\
// Render your root component \
root.render(<Parent />);\
\
\
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf4 // Return the sum of all numbers\
let x = [67, 8, 20, 9]\
\
// console.log(z); \\\
\
  \
 \
   \
const sea = () =>\{\
  let sum = 0\
  x.map(\
     function(z)\{ \
        // let sum = 0\
        sum += z\
        \
      \}\
  )\
  return(\
   sum\
  );\
\}\
\
document.getElementById("c").innerHTML = sea();\
\
\
\
Create an express server for products and feed It the typescript interface
\f0\b0 \
}